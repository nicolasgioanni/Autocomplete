Mon Apr 17 05:20:48 UTC 2023
Linux LinuxMachine 5.10.16.3-microsoft-standard-WSL2 #1 SMP Fri Apr 2 22:23:49 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux
uid=1000(cssuwbstudent) gid=1000(cssuwbstudent) groups=1000(cssuwbstudent),10(wheel)
=====================================================
1. Compiles without warnings with -Wall -Wextra flags
=====================================================
=====================================================
2. Runs and produces correct output
=====================================================
Starting test01
* Testing ==, !=, [] and copy constructor
Ending tes01
Starting test02
* Testing traversal
Ending test02
Starting test03
* Testing rebalance
Ending test03
Starting test04
    [No=2]
        [Hello there=1]
            [Bye=3]


Ending test04
Starting AC test01
* Testing basic autocomplete
Ending tesAC01
Starting AC test02
* Testing cities autocomplete
Ending tesAC02
Starting AC test03
Cannot open!
=====================================================
3. clang-tidy warnings are fixed
=====================================================
17434 warnings generated.
31665 warnings generated.
48439 warnings generated.
65375 warnings generated.
79598 warnings generated.
94102 warnings generated.
Suppressed 94102 warnings (94102 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
=====================================================
4. clang-format does not find any formatting issues
=====================================================
Running clang-format on ./autocomplete.cpp
Running clang-format on ./bstmap.cpp
Running clang-format on ./bstmapprinter.cpp
Running clang-format on ./main.cpp
Running clang-format on ./testac.cpp
Running clang-format on ./testbst.cpp
=====================================================
5. No memory leaks using g++
=====================================================
=====================================================
6. No memory leaks using valgrind, look for "definitely lost" 
=====================================================
==2143== Memcheck, a memory error detector
==2143== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==2143== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
==2143== Command: ./a.out
==2143== Parent PID: 1862
==2143== 
==2143== 
==2143== HEAP SUMMARY:
==2143==     in use at exit: 23 bytes in 1 blocks
==2143==   total heap usage: 1,061,382 allocs, 1,061,381 frees, 66,908,693 bytes allocated
==2143== 
==2143== LEAK SUMMARY:
==2143==    definitely lost: 0 bytes in 0 blocks
==2143==    indirectly lost: 0 bytes in 0 blocks
==2143==      possibly lost: 0 bytes in 0 blocks
==2143==    still reachable: 23 bytes in 1 blocks
==2143==         suppressed: 0 bytes in 0 blocks
==2143== Rerun with --leak-check=full to see details of leaked memory
==2143== 
==2143== For lists of detected and suppressed errors, rerun with: -s
==2143== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
=====================================================
7. Tests have full code coverage
=====================================================
File '/home/cssuwbstudent/2022win343d-autocomplete-nicolasgioanni/autocomplete.cpp':
Name                                                                                                                   Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Autocomplete::readFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)              16       0 100.00%        28       0 100.00%        12       1  91.67%
Autocomplete::complete(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const        13       0 100.00%        20       0 100.00%        10       0 100.00%
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                       29       0 100.00%        48       0 100.00%        22       1  95.45%

File '/home/cssuwbstudent/2022win343d-autocomplete-nicolasgioanni/bstmap.cpp':
Name                                                                                                                                                                                                                                                                                                                                                                                      Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
BSTMap::BSTMap(BSTMap const&)                                                                                                                                                                                                                                                                                                                                                                   1       0 100.00%         5       0 100.00%         0       0   0.00%
BSTMap::copyConstructorHelper(BSTMap::Node*, BSTMap::Node*)                                                                                                                                                                                                                                                                                                                                    10       0 100.00%        15       0 100.00%         8       0 100.00%
BSTMap::BSTMap(std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long> > > const&)                                                                                                                      1       0 100.00%         6       0 100.00%         0       0   0.00%
BSTMap::Node::Node(BSTMap::Node*, BSTMap::Node*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long>&)                                                                                                                                                                                                                                    1       0 100.00%         5       0 100.00%         0       0   0.00%
BSTMap::~BSTMap()                                                                                                                                                                                                                                                                                                                                                                               1       0 100.00%         1       0 100.00%         0       0   0.00%
BSTMap::clear()                                                                                                                                                                                                                                                                                                                                                                                 1       0 100.00%         5       0 100.00%         0       0   0.00%
BSTMap::clearHelper(BSTMap::Node*)                                                                                                                                                                                                                                                                                                                                                              4       0 100.00%         9       0 100.00%         2       0 100.00%
BSTMap::empty() const                                                                                                                                                                                                                                                                                                                                                                           1       0 100.00%         1       0 100.00%         0       0   0.00%
BSTMap::size() const                                                                                                                                                                                                                                                                                                                                                                            1       1   0.00%         1       1   0.00%         0       0   0.00%
BSTMap::contains(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const                                                                                                                                                                                                                                                                                  1       0 100.00%         4       0 100.00%         0       0   0.00%
BSTMap::containsHelper(unsigned long&, BSTMap::Node*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const                                                                                                                                                                                                                                             9       2  77.78%        11       2  81.82%         8       4  50.00%
BSTMap::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                                                                                                                                                                                                     19       1  94.74%        35       1  97.14%        12       1  91.67%
BSTMap::getAll(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const                                                                                                                                                                                                                                                                                    1       0 100.00%         5       0 100.00%         0       0   0.00%
BSTMap::getAllHelper(BSTMap::Node*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long> > >&) const         6       0 100.00%        10       0 100.00%         4       0 100.00%
BSTMap::height() const                                                                                                                                                                                                                                                                                                                                                                          1       0 100.00%         1       0 100.00%         0       0   0.00%
BSTMap::getHeight(BSTMap::Node const*)                                                                                                                                                                                                                                                                                                                                                          7       1  85.71%        11       2  81.82%         4       1  75.00%
BSTMap::count(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const                                                                                                                                                                                                                                                                                     4       1  75.00%         6       1  83.33%         2       1  50.00%
BSTMap::inorder(void (*)(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long> const&)) const                                                                                                                                                                                                                                               1       0 100.00%         3       0 100.00%         0       0   0.00%
BSTMap::inOrderHelper(BSTMap::Node*, void (*)(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long> const&)) const                                                                                                                                                                                                                          4       0 100.00%         8       0 100.00%         2       0 100.00%
BSTMap::preorder(void (*)(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long> const&)) const                                                                                                                                                                                                                                              1       0 100.00%         3       0 100.00%         0       0   0.00%
BSTMap::preOrderHelper(BSTMap::Node*, void (*)(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long> const&)) const                                                                                                                                                                                                                         4       0 100.00%         8       0 100.00%         2       0 100.00%
BSTMap::postorder(void (*)(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long> const&)) const                                                                                                                                                                                                                                             1       0 100.00%         3       0 100.00%         0       0   0.00%
BSTMap::postOrderHelper(BSTMap::Node*, void (*)(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long> const&)) const                                                                                                                                                                                                                        4       0 100.00%         8       0 100.00%         2       0 100.00%
BSTMap::rebalance()                                                                                                                                                                                                                                                                                                                                                                             4       1  75.00%        10       2  80.00%         2       1  50.00%
BSTMap::rebalanceHelper(std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long> > >&, BSTMap::Node*)                                                                                                    4       0 100.00%         8       0 100.00%         2       0 100.00%
BSTMap::treeConstructionHelper(BSTMap::Node*, std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long> > >&, int, int)                                                                                  11       0 100.00%        17       0 100.00%         8       2  75.00%
BSTMap::operator==(BSTMap const&) const                                                                                                                                                                                                                                                                                                                                                        11       2  81.82%         9       2  77.78%         8       4  50.00%
BSTMap::operatorDoubleEqualHelper(BSTMap::Node*, BSTMap::Node*) const                                                                                                                                                                                                                                                                                                                          15       1  93.33%        11       2  81.82%        14       6  57.14%
BSTMap::operator!=(BSTMap const&) const                                                                                                                                                                                                                                                                                                                                                         1       0 100.00%         3       0 100.00%         0       0   0.00%
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                                                                                                                                                                                                         130      10  92.31%       222      13  94.14%        80      20  75.00%

File '/home/cssuwbstudent/2022win343d-autocomplete-nicolasgioanni/bstmapprinter.cpp':
Name                                                                                                                                                                                                                                                                                                                                                                                      Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
operator<<(std::ostream&, BSTMap::Node const&)                                                                                                                                                                                                                                                                                                                                                  1       0 100.00%         4       0 100.00%         0       0   0.00%
operator<<(std::ostream&, BSTMap const&)                                                                                                                                                                                                                                                                                                                                                        1       0 100.00%         5       0 100.00%         0       0   0.00%
BSTMap::printSideways(std::ostream&, BSTMap::Node const*, int)                                                                                                                                                                                                                                                                                                                                  4       0 100.00%        12       0 100.00%         2       0 100.00%
BSTMap::centeredPrint(std::ostream&, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char)                                                                                                                                                                                                                                                         4       4   0.00%        11      11   0.00%         2       2   0.00%
BSTMap::printTreeLevel(std::ostream&, std::queue<BSTMap::Node const*, std::deque<BSTMap::Node const*, std::allocator<BSTMap::Node const*> > >&, int, int, int)                                                                                                                                                                                                                                 11      11   0.00%        34      34   0.00%         8       8   0.00%
BSTMap::printVertical(std::ostream&, BSTMap::Node*)                                                                                                                                                                                                                                                                                                                                             7       7   0.00%        13      13   0.00%         4       4   0.00%
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                                                                                                                                                                                                          28      22  21.43%        79      58  26.58%        16      14  12.50%

File '/home/cssuwbstudent/2022win343d-autocomplete-nicolasgioanni/main.cpp':
Name                                                                                                                                                                                                                                                                                                                                                                                      Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
testMain()                                                                                                                                                                                                                                                                                                                                                                                      1       0 100.00%         4       0 100.00%         0       0   0.00%
main                                                                                                                                                                                                                                                                                                                                                                                            5       2  60.00%        15       8  46.67%         4       3  25.00%
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                                                                                                                                                                                                           6       2  66.67%        19       8  57.89%         4       3  25.00%

File '/home/cssuwbstudent/2022win343d-autocomplete-nicolasgioanni/testac.cpp':
Name                                                                                                                                                                                                                                                                                                                                                                                      Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
testAC01()                                                                                                                                                                                                                                                                                                                                                                                      1       0 100.00%        13       5  61.54%         0       0   0.00%
testAC02()                                                                                                                                                                                                                                                                                                                                                                                      1       0 100.00%        13       5  61.54%         0       0   0.00%
testAC03()                                                                                                                                                                                                                                                                                                                                                                                      1       0 100.00%         6       0 100.00%         0       0   0.00%
testACAll()                                                                                                                                                                                                                                                                                                                                                                                     1       0 100.00%         5       0 100.00%         0       0   0.00%
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                                                                                                                                                                                                           4       0 100.00%        37      10  72.97%         0       0   0.00%

File '/home/cssuwbstudent/2022win343d-autocomplete-nicolasgioanni/testbst.cpp':
Name                                                                                                                                                                                                                                                                                                                                                                                      Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
printer(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long> const&)                                                                                                                                                                                                                                                                       1       0 100.00%         3       0 100.00%         0       0   0.00%
test01()                                                                                                                                                                                                                                                                                                                                                                                        1       0 100.00%        19       5  73.68%         0       0   0.00%
test02()                                                                                                                                                                                                                                                                                                                                                                                        1       0 100.00%        23       3  86.96%         0       0   0.00%
test03()                                                                                                                                                                                                                                                                                                                                                                                        1       0 100.00%        17       3  82.35%         0       0   0.00%
test04()                                                                                                                                                                                                                                                                                                                                                                                        1       0 100.00%        23       3  86.96%         0       0   0.00%
testBSTAll()                                                                                                                                                                                                                                                                                                                                                                                    1       0 100.00%         6       0 100.00%         0       0   0.00%
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                                                                                                                                                                                                           6       0 100.00%        91      14  84.62%         0       0   0.00%
=====================================================
The lines below were never executed
=====================================================
   84|      0|int BSTMap::size() const { return totalMapNodes; }
  100|      0|    return false;
  101|      0|  }
  154|      0|  exit(1);
  190|      0|    return left + 1;
  191|      0|  }
  201|      0|  return 0;
  257|      0|    return;
  258|      0|  }
  302|      0|    return true;
  303|      0|  }
  316|      0|    return false;
  317|      0|  }
   48|      0|                               char fillChar) {
   49|      0|  auto strL = static_cast<int>(str.length());
   50|      0|  int extra = (space - strL) / 2;
   51|      0|  if (extra > 0) {
   52|      0|    out << setfill(fillChar) << setw(extra + strL) << str;
   53|      0|    out << setfill(fillChar) << setw(space - extra - strL) << fillChar;
   54|      0|  } else {
   55|      0|    out << setfill(fillChar) << setw(space) << str;
   56|      0|  }
   57|      0|  return out;
   58|      0|}
   69|      0|                                int depth, int maxDepth) {
   70|      0|  const static char space = ' ';
   71|      0|  const static char underline = '_';
   72|      0|  int nodes = 0;
   73|      0|  int maxN = static_cast<int>(pow(2, depth - 1));
   74|      0|  int spaceForEachItem = static_cast<int>(width * pow(2, maxDepth - 1) / maxN);
   75|      0|  string bigspace = string(static_cast<uint64_t>(spaceForEachItem / 4), space);
   76|      0|  while (nodes++ < maxN) {
   77|      0|    const Node *tp = q.front();
   78|      0|    Node *tpl = nullptr;
   79|      0|    Node *tpr = nullptr;
   80|      0|    q.pop();
   81|      0|    string label = "N";
   82|      0|    if (tp != nullptr) {
   83|      0|      stringstream ss;
   84|      0|      ss << *tp;
   85|      0|      label = ss.str();
   86|      0|      tpl = tp->left;
   87|      0|      tpr = tp->right;
   88|      0|    }
   89|      0|    char filler = depth == maxDepth ? space : underline;
   90|      0|    if (depth == maxDepth) {
   91|      0|      centeredPrint(out, spaceForEachItem, label, filler);
   92|      0|    } else {
   93|      0|      out << bigspace;
   94|      0|      centeredPrint(out, spaceForEachItem / 2, label, filler);
   95|      0|      out << bigspace;
   96|      0|      q.push(tpl);
   97|      0|      q.push(tpr);
   98|      0|    }
   99|      0|  }
  100|      0|  out << endl;
  101|      0|  return out;
  102|      0|}
  105|      0|ostream &BSTMap::printVertical(ostream &out, Node *curr) {
  106|      0|  const static int width = 6; // must be even
  107|      0|  if (curr == nullptr) {
  108|      0|    return out << "[__]";
  109|      0|  }
  111|      0|  int maxDepth = getHeight(curr);
  112|      0|  queue<const Node *> q;
  113|      0|  q.push(curr);
  114|      0|  for (int depth = 1; depth <= maxDepth; ++depth) {
  115|      0|    printTreeLevel(out, q, width, depth, maxDepth);
  116|      0|  }
  117|      0|  return out;
  118|      0|}
   19|      0|    Autocomplete ac;
   20|      0|    string filename = argv[1];
   21|      0|    string prefix = argv[2];
   22|      0|    ac.readFile(filename);
   23|      0|    auto results = ac.complete(prefix);
   24|      0|    for (auto &p : results) {
   25|      0|      cout << p.first << "\t" << p.second << endl;
   26|      0|    }
   16|      0|  assert(v[0].first == "help");
   17|      0|  assert(v[0].second == 20);
   18|      0|  assert(v[1].first == "hello");
   19|      0|  assert(v[1].second == 10);
   20|      0|  cout << "Ending tesAC01" << endl;
   30|      0|  assert(v[0].first == "Seattle, Washington, United States");
   31|      0|  assert(v[0].second == 608660);
   32|      0|  assert(v[46].first == "Seabeck, Washington, United States");
   33|      0|  assert(v[46].second == 1105);
   34|      0|  cout << "Ending tesAC02" << endl;
   41|      0|  b1["hello"] = 5;
   44|      0|  b1["world"] = 42;
   48|      0|  b2["hello"] = 5;
   52|      0|  BSTMap b3(b2);
   54|      0|  cout << "Ending tes01" << endl;
   74|      0|  globalSS.str("");
   79|      0|  globalSS.str("");
   83|      0|  cout << "Ending test02" << endl;
   99|      0|  b.rebalance();
  102|      0|  b.clear();
  104|      0|  cout << "Ending test03" << endl;
  129|      0|  assert(!testingFunctions.empty());
  130|      0|  assert(testingFunctions.count("Bye") == 1);
  132|      0|  cout << testingFunctions << endl;
Mon Apr 17 05:21:16 UTC 2023
=====================================================
To create an output.txt file with all the output from this script
Run the below command
      ./create-output.sh > output.txt 2>&1 
=====================================================
